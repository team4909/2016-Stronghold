// RobotBuilder Version: 2.
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4909.Bionics2016;

import edu.wpi.first.wpilibj.ADXL362;
import edu.wpi.first.wpilibj.ADXRS450_Gyro;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DigitalOutput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Ultrasonic;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.interfaces.Accelerometer.Range;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController drivetrainfrontLeft;
    public static SpeedController drivetrainbackLeft;
    public static SpeedController drivetrainfrontRight;
    public static SpeedController drivetrainbackRight;
    public static RobotDrive drivetraindriveControl;
    public static Encoder drivetrainleftDriveEncoder;
    public static Encoder drivetrainrightDriveEncoder;
    public static ADXRS450_Gyro drivetraingyro;
    public static ADXL362 drivetrainaccelerometer;
    public static SpeedController shootershooterLeftWheel;
    public static SpeedController shootershooterRightWheel;
    public static Encoder shooterleftShootEncoder;
    public static Encoder shooterrightShootEncoder;
    public static SpeedController feederfeedAxle;
    public static DigitalInput feederfeedSwitch;
    public static SpeedController pivotpivotControl;
    //public static SpeedController pivotpivotControlRight;
    public static Encoder pivotpivotEncoder;
    public static SpeedController climberclimbDeliver;
    public static SpeedController climberclimbWinch;
    public static Encoder climberclimbEncoder;
    //public static Compressor feederCompressor;
    //public static DoubleSolenoid feederDSol;
    //public static AnalogInput leftUltra;
    //public static AnalogInput rightUltra;
    //public static DigitalOutput ultrasonicStart;
    //public static AnalogPotentiometer pivotPot;
    public static PowerDistributionPanel PDP;
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DigitalInput pivotTopSwitch;
    public static DigitalInput pivotBottomSwitch;

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    	
    	/*Current Port Configuration (if this is changed, update below!):
    	 * DIO:
    	 * 0-
    	 * 1-Pivot Top Limit Switch (pivotTopSwitch)
    	 * 2-Pivot Bottom Limit Switch (pivotBottomSwitch)
    	 * 3+4- Pivot Encoder (pivotpivotEncoder)
    	 * 5+6- Right Side Drivetrain Encoder (drivetrainrightDriveEncoder)
    	 * 7+8- Left Shooter Wheel Encoder (shooterleftShootEncoder)
    	 * 9+10- Right Shooter Wheel Encoder (shooterrightShootEncoder)
    	 * 11+12- Left Side Drivetrain Encoder (drivetrainleftDriveEncoder)
    	 * 13-Feeder Limit Switch (boulder is in the robot) (feederfeedSwitch)
    	 * 14+15- Climber Encoder (climberclimbEncoder)
    	 * 
    	 * PWM:
    	 * 0-Front Left Drivetrain Motor (drivetrainfrontLeft)
    	 * 1-Back Left Drivetrain Motor (drivetrainbackLeft)
    	 * 2-Front Right Drivetrain Motor (drivetrainfrontRight)
    	 * 3-Back Right Drivetrain Motor (drivetrainbackRight)
    	 * 4-
    	 * 5-Feeder Axle Motor (feederfeedAxle)
    	 * 6-Left Shooter Wheel Motor (shootershooterLeftWheel)
    	 * 7-Climber Motor (climberclimbMotor)
    	 * 8-Right Shooter Wheel Motor (shootershooterRightWheel)
    	 * 9-Pivot Motor (pivotpivotControl)

    	 * 
    	 * Serial Peripheral Interface:
    	 * Drivetrain Gyro
    	 * Drivetrain Accelerometer
    	 */
    	
    	//11, 13, 15, 17, 18, 22, 26, 27, 29, and 31 can be used as DIO or PWM, but seem to only work being PWM. Do not use as DIO
    	
    	/*
    	 * PWM:
    	 * 0 Drivetrain Front Left
    	 * 1 Drivetrain Back Left
    	 * 2 Drivetrain Front Right
    	 * 3 Drivetrain Back Right
    	 * 4 || 5 Shooter Left Wheel
    	 * 4 || 5 Shooter Right Wheel
    	 * Pivot Motor
    	 * Climber Winch
    	 * Climber Tape Measure
    	 * 
    	 * 
    	 * DIO:
    	 * Drivetrain Left Encoder (2)
    	 * Drivetrain Right Encoder (2)
    	 * Pivot Encoder (2)
    	 * Limit Switch Ball In
    	 * Limit Switch Top
    	 * Limit Switch Bottom
    	 * 
    	 * Maybes:
    	 * Climber Winch Encoder (2)?
    	 * Climber Tapemeasure Encoder (2)?
    	 * 2x Shooter Encoders? (2 per)
    	 * 
    	 */
    	
//    	//Drivetrain
    	PDP = new PowerDistributionPanel();
//    	//Drivetrain Motors
    	//----------------
        drivetrainfrontLeft = new VictorSP(0); //Yellow+White//0
        drivetrainfrontLeft.setInverted(true);
        
        
        drivetrainbackLeft = new VictorSP(1);//Yellow+Grey//1
        drivetrainbackLeft.setInverted(true);
        
        
        drivetrainfrontRight = new VictorSP(2);//Orange+White//2
        drivetrainfrontRight.setInverted(true);
        
        
        drivetrainbackRight = new VictorSP(3);//Orange+Grey//3
        drivetrainbackRight.setInverted(true);
        
        
        //Drivetrain Drive
        drivetraindriveControl = new RobotDrive(drivetrainfrontLeft, drivetrainbackLeft,
              drivetrainfrontRight, drivetrainbackRight);
        
        drivetraindriveControl.setSafetyEnabled(true);
        drivetraindriveControl.setExpiration(0.25);
        drivetraindriveControl.setSensitivity(0.5);
        drivetraindriveControl.setMaxOutput(1.0);

        //Drivetrain Sensors
        drivetrainleftDriveEncoder = new Encoder(10, 11, true, EncodingType.k4X);
        
        drivetrainleftDriveEncoder.setDistancePerPulse(1.0);
        drivetrainleftDriveEncoder.setPIDSourceType(PIDSourceType.kRate);
        
        drivetrainrightDriveEncoder = new Encoder(12, 13, false, EncodingType.k4X);
        
        drivetrainrightDriveEncoder.setDistancePerPulse(1.0);
        drivetrainrightDriveEncoder.setPIDSourceType(PIDSourceType.kRate);
        //----------------
        
        drivetraingyro = new ADXRS450_Gyro();
        
        //drivetraingyro.setSensitivity(0.007);
        
        drivetrainaccelerometer = new ADXL362(Range.k8G); 
        
        //leftUltra = new AnalogInput(0);
        
        //rightUltra = new AnalogInput(1);
        
        
        //Shooter
        //Shooter Motors
        shootershooterLeftWheel = new Spark(5);//Blue+White
        
        shootershooterLeftWheel.setInverted(true);
        
        shootershooterRightWheel = new Spark(4);//Blue+Grey
        
        shootershooterRightWheel.setInverted(false);
//        //Shooter Sensors
        shooterleftShootEncoder = new Encoder(19, 20, false, EncodingType.k4X);
        
        shooterleftShootEncoder.setDistancePerPulse(1.0/1024);
        shooterleftShootEncoder.setPIDSourceType(PIDSourceType.kRate);
        
        shooterrightShootEncoder = new Encoder(23, 24, true, EncodingType.k4X);
        
        shooterrightShootEncoder.setDistancePerPulse(1.0/1024);
        shooterrightShootEncoder.setPIDSourceType(PIDSourceType.kRate);
        shooterrightShootEncoder.setSamplesToAverage(50);
        
        
        //Feeder
        //Feeder Motor
        feederfeedAxle = new VictorSP(6);
        
        
        
        //Feeder Sensor
        feederfeedSwitch = new DigitalInput(7);
        
        /*
        feederCompressor = new Compressor(0);
        feederDSol = new DoubleSolenoid(0, 0, 1);      
        
        */
        //Pivot
        //Pivot Motor
        pivotpivotControl = new Spark(9);//Green+White
        
        pivotpivotControl.setInverted(true);
        

        /*pivotpivotControlRight = new Spark(7);//Green+Grey
        
        pivotpivotControlRight.setInverted(true);*/
        
        //Pivot Sensors
        pivotTopSwitch= new DigitalInput(16);
        
        
        pivotBottomSwitch = new DigitalInput(21);
        

        pivotpivotEncoder = new Encoder(17, 18, true, EncodingType.k4X);

        
        pivotpivotEncoder.setDistancePerPulse(360.0/7455);
        pivotpivotEncoder.setPIDSourceType(PIDSourceType.kDisplacement);
        
        /*
        pivotPot = new AnalogPotentiometer(2,265,0);//Port, Range, offset
        
        pivotPot.setPIDSourceType(PIDSourceType.kDisplacement);
*/
        //Climber
        //Climber Motor
        climberclimbDeliver = new Spark(8);//Purple+White
        
       
        climberclimbWinch = new Spark(7);//Purple+Grey
        
        
        //Climber Sensors Will never exsist 
        climberclimbEncoder = new Encoder(14, 15, false, EncodingType.k4X);
        
        climberclimbEncoder.setDistancePerPulse(1.0);
        climberclimbEncoder.setPIDSourceType(PIDSourceType.kRate);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        //ultrasonicStart = new DigitalOutput(24);
    }
}
